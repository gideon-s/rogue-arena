// Generated by CoffeeScript 1.7.1
(function() {
  window.Location = (function() {
    function Location(pair) {
      if (pair.length !== 2) {
        throw new Error("error in pair length: " + pair);
      }
      if (typeof pair[0] !== "number") {
        throw new Error("First in pair is not a number: " + pair[0]);
      }
      if (typeof pair[1] !== "number") {
        throw new Error("Second in pair is not a number: " + pair[1]);
      }
      this.x = pair[0];
      this.y = pair[1];
    }

    Location.prototype.addDir = function(dir) {
      return new Location([this.x + dir[0], this.y + dir[1]]);
    };

    Location.prototype.pair = function() {
      return [this.x, this.y];
    };

    Location.prototype.pathToDestination = function(destination, map, topology) {
      var astar, dest, passableCallback, path, pathCallback;
      if (topology == null) {
        topology = 8;
      }
      passableCallback = function(x, y) {
        return map.isOpen(new Location([x, y]));
      };
      dest = destination.pair();
      astar = new ROT.Path.AStar(dest[0], dest[1], passableCallback, {
        topology: topology
      });
      path = [];
      pathCallback = function(x, y) {
        return path.push(new Location([x, y]));
      };
      astar.compute(this.x, this.y, pathCallback);
      path.shift();
      return path;
    };

    Location.prototype.nextStepToDestination = function(destination, map, topology) {
      if (topology == null) {
        topology = 8;
      }
      return this.pathToDestination(destination, map, topology)[0];
    };

    Location.prototype.drawOn = function(display, character, color) {
      return display.draw(this.x, this.y, character, color);
    };

    Location.prototype.setOn = function(map, symbol) {
      if (!Array.isArray(map)) {
        throw new Error("Map is not an array");
      }
      return map[this.x][this.y] = symbol;
    };

    Location.prototype.on = function(map) {
      if (!Array.isArray(map)) {
        throw new Error("Map is not an array");
      }
      if (map[this.x] == null) {
        return void 0;
      }
      return map[this.x][this.y];
    };

    Location.prototype.otherActors = function(entity) {
      return _.filter(Game.actors, (function(_this) {
        return function(actor) {
          return (actor !== entity) && (_.isEqual(actor.location, _this));
        };
      })(this));
    };

    Location.prototype.toString = function() {
      return "[ " + this.x + ", " + this.y + " ]";
    };

    return Location;

  })();

}).call(this);
