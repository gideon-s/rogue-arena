// Generated by CoffeeScript 1.8.0
(function() {
  window.Map = (function() {
    function Map(game, width, height) {
      var x, y, _i, _j, _k, _ref, _ref1, _ref2;
      this.game = game;
      this.width = width;
      this.height = height;
      this.map = [];
      for (x = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        this.map[x] = new Array(this.height);
      }
      for (x = _j = 0, _ref1 = this.width; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
        for (y = _k = 0, _ref2 = this.height; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; y = 0 <= _ref2 ? ++_k : --_k) {
          this.map[x][y] = new Location(this.game, this, [x, y]);
        }
      }
      this.noLocation = new NoLocation();
    }

    Map.prototype.isOpen = function(location) {
      return location.isOpen();
    };

    Map.prototype.lookupLocation = function(pair) {
      var result, xRow;
      xRow = this.map[pair[0]];
      if (xRow == null) {
        return this.noLocation;
      }
      result = xRow[pair[1]];
      if (result != null) {
        return result;
      } else {
        return this.noLocation;
      }
    };

    Map.prototype.locations = function() {
      var result, x, y, _i, _j, _ref, _ref1;
      result = [];
      for (x = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        for (y = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          result.push(this.lookupLocation([x, y]));
        }
      }
      return result;
    };

    Map.prototype.randomLocation = function() {
      return Util.pickRandom(this.locations());
    };

    Map.prototype.randomEdgeLocation = function() {
      return Util.pickRandom(this.edgeLocations());
    };

    Map.prototype.edgeLocations = function() {
      var result, x, y, _i, _j, _ref, _ref1;
      result = [];
      for (x = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        result.push(this.lookupLocation([x, 0]));
        result.push(this.lookupLocation([x, this.height - 1]));
      }
      for (y = _j = 1, _ref1 = this.height - 1; 1 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 1 <= _ref1 ? ++_j : --_j) {
        result.push(this.lookupLocation([0, y]));
        result.push(this.lookupLocation([this.width - 1, y]));
      }
      return result;
    };

    return Map;

  })();

}).call(this);
