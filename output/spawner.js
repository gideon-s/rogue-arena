// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Spawner = (function() {
    function Spawner(game) {
      this.game = game;
      if (false) {
        this.current = new None(this.game);
      } else if (false) {
        this.current = new One(this.game, Citizen);
      } else if (false) {
        this.current = new Only(this.game, MajorDemon);
      } else {
        this.current = new Level1(this.game);
      }
    }

    Spawner.prototype.spawn = function(rate) {
      this.level().spawn();
      if ((this.game.halt != null) && this.game.halt) {
        return;
      }
      return window.setTimeout(((function(_this) {
        return function() {
          return _this.spawn(rate);
        };
      })(this)), rate);
    };

    Spawner.prototype.level = function() {
      if (this.current.finished()) {
        this.current = this.current.next();
      }
      return this.current;
    };

    return Spawner;

  })();

  window.Chooser = (function() {
    function Chooser(game) {
      this.game = game;
    }

    Chooser.prototype.name = function() {
      return this.constructor.name;
    };

    Chooser.prototype.create = function(type) {
      if (type != null) {
        return new type(this.game, this.game.map.randomEdgeLocation());
      }
    };

    Chooser.prototype.spawn = function() {
      return this.create(this.monsterType());
    };

    Chooser.prototype.score = function() {
      return this.game.player.score;
    };

    Chooser.prototype.next = function() {
      return this;
    };

    return Chooser;

  })();

  window.None = (function(_super) {
    __extends(None, _super);

    function None(game) {
      this.game = game;
    }

    None.prototype.finished = function() {
      return false;
    };

    None.prototype.spawn = function() {};

    return None;

  })(window.Chooser);

  window.One = (function(_super) {
    __extends(One, _super);

    function One(game, type) {
      this.game = game;
      this.type = type;
    }

    One.prototype.finished = function() {
      return false;
    };

    One.prototype.spawn = function() {
      if (this.called != null) {
        return;
      }
      this.create(this.type);
      return this.called = true;
    };

    return One;

  })(window.Chooser);

  window.Only = (function(_super) {
    __extends(Only, _super);

    function Only(game, type) {
      this.game = game;
      this.type = type;
    }

    Only.prototype.finished = function() {
      return false;
    };

    Only.prototype.spawn = function() {
      return this.create(this.type);
    };

    return Only;

  })(window.Chooser);

  window.Level1 = (function(_super) {
    __extends(Level1, _super);

    function Level1() {
      return Level1.__super__.constructor.apply(this, arguments);
    }

    Level1.prototype.monsterType = function() {
      if (Util.oneIn(3)) {
        return Citizen;
      } else if (Util.oneIn(3)) {
        return Firebat;
      } else {
        return MinorDemon;
      }
    };

    Level1.prototype.finished = function() {
      return this.score() > 20;
    };

    Level1.prototype.next = function() {
      return new Level2(this.game);
    };

    return Level1;

  })(window.Chooser);

  window.Level2 = (function(_super) {
    __extends(Level2, _super);

    function Level2() {
      return Level2.__super__.constructor.apply(this, arguments);
    }

    Level2.prototype.monsterType = function() {
      if (Util.oneIn(2)) {
        return MinorDemon;
      } else if (Util.oneIn(3)) {
        return Citizen;
      } else {
        return OrcCharger;
      }
    };

    Level2.prototype.finished = function() {
      return this.score() > 50;
    };

    Level2.prototype.next = function() {
      return new Level3(this.game);
    };

    return Level2;

  })(window.Chooser);

  window.Level3 = (function(_super) {
    __extends(Level3, _super);

    function Level3() {
      return Level3.__super__.constructor.apply(this, arguments);
    }

    Level3.prototype.monsterType = function() {
      if (Util.oneIn(3)) {
        return Firebat;
      } else if (Util.oneIn(4)) {
        return Gridbug;
      } else if (Util.oneIn(5)) {
        return Citizen;
      } else if (Util.oneIn(3)) {
        return MajorDemon;
      } else {
        return MinorDemon;
      }
    };

    Level3.prototype.finished = function() {
      return this.score() > 100;
    };

    Level3.prototype.next = function() {
      return new Level4(this.game);
    };

    return Level3;

  })(window.Chooser);

  window.Level4 = (function(_super) {
    __extends(Level4, _super);

    function Level4() {
      return Level4.__super__.constructor.apply(this, arguments);
    }

    Level4.prototype.spawn = function() {
      var dir, _i;
      if (this.called == null) {
        this.called = 0;
      }
      this.called = this.called + 1;
      if (this.called === 20) {
        for (dir = _i = 0; _i <= 15; dir = ++_i) {
          this.create(Gridbug);
        }
        this.create(GridBoss);
        return this.bossSpawned = 1;
      }
    };

    Level4.prototype.finished = function() {
      return (this.bossSpawned != null) && !_.find(this.game.actors, (function(_this) {
        return function(actor) {
          return actor instanceof GridBoss;
        };
      })(this));
    };

    Level4.prototype.next = function() {
      return new Level5(this.game);
    };

    return Level4;

  })(window.Chooser);

  window.Level5 = (function(_super) {
    __extends(Level5, _super);

    function Level5() {
      return Level5.__super__.constructor.apply(this, arguments);
    }

    Level5.prototype.monsterType = function() {
      if (Util.oneIn(3)) {
        return ElvenArcher;
      } else if (Util.oneIn(5)) {
        return Citizen;
      }
    };

    Level5.prototype.finished = function() {
      return this.score() > 400;
    };

    Level5.prototype.next = function() {
      return new Level6(this.game);
    };

    return Level5;

  })(window.Chooser);

  window.Level6 = (function(_super) {
    __extends(Level6, _super);

    function Level6() {
      return Level6.__super__.constructor.apply(this, arguments);
    }

    Level6.prototype.spawn = function() {
      var dir, _i;
      if (this.called == null) {
        this.called = 0;
      }
      this.called = this.called + 1;
      if (this.called === 2) {
        for (dir = _i = 0; _i <= 30; dir = ++_i) {
          this.create(OrcCharger);
        }
        this.create(OrcBoss);
        return this.bossSpawned = 1;
      }
    };

    Level6.prototype.finished = function() {
      return (this.bossSpawned != null) && !_.find(this.game.actors, (function(_this) {
        return function(actor) {
          return actor instanceof OrcBoss;
        };
      })(this));
    };

    Level6.prototype.next = function() {
      return new Level6(this.game);
    };

    return Level6;

  })(window.Chooser);

}).call(this);
