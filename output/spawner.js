// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Spawner = (function() {
    function Spawner(game) {
      this.game = game;
      this.current = new Level1(this.game);
    }

    Spawner.prototype.spawn = function() {
      this.level().spawn();
      return window.setTimeout(((function(_this) {
        return function() {
          return _this.spawn();
        };
      })(this)), 1000);
    };

    Spawner.prototype.level = function() {
      if (this.current.finished()) {
        this.current = this.current.next();
      }
      return this.current;
    };

    return Spawner;

  })();

  window.Chooser = (function() {
    function Chooser(game) {
      this.game = game;
    }

    Chooser.prototype.name = function() {
      return this.constructor.name;
    };

    Chooser.prototype.create = function(type) {
      return this.game.actors.push(new type(this.game, this.game.map.randomEdgeLocation()));
    };

    Chooser.prototype.spawn = function() {
      return this.create(this.monsterType());
    };

    Chooser.prototype.score = function() {
      return this.game.player.score;
    };

    return Chooser;

  })();

  window.Level1 = (function(_super) {
    __extends(Level1, _super);

    function Level1() {
      return Level1.__super__.constructor.apply(this, arguments);
    }

    Level1.prototype.monsterType = function() {
      return MinorDemon;
    };

    Level1.prototype.finished = function() {
      return this.score() > 10;
    };

    Level1.prototype.next = function() {
      return new Level2(this.game);
    };

    return Level1;

  })(window.Chooser);

  window.Level2 = (function(_super) {
    __extends(Level2, _super);

    function Level2() {
      return Level2.__super__.constructor.apply(this, arguments);
    }

    Level2.prototype.monsterType = function() {
      var type;
      if (Util.oneIn(2)) {
        return type = MinorDemon;
      } else {
        return type = Gridbug;
      }
    };

    Level2.prototype.finished = function() {
      return this.score() > 20;
    };

    Level2.prototype.next = function() {
      return new Level3(this.game);
    };

    return Level2;

  })(window.Chooser);

  window.Level3 = (function(_super) {
    __extends(Level3, _super);

    function Level3() {
      return Level3.__super__.constructor.apply(this, arguments);
    }

    Level3.prototype.monsterType = function() {
      var type;
      if (Util.oneIn(10)) {
        return type = ElvenArcher;
      } else if (Util.oneIn(3)) {
        return type = Gridbug;
      } else {
        return type = MinorDemon;
      }
    };

    Level3.prototype.finished = function() {
      return this.score() > 30;
    };

    Level3.prototype.next = function() {
      return new Level4(this.game);
    };

    return Level3;

  })(window.Chooser);

  window.Level4 = (function(_super) {
    __extends(Level4, _super);

    function Level4() {
      return Level4.__super__.constructor.apply(this, arguments);
    }

    Level4.prototype.spawn = function() {
      var dir, _i;
      if (this.called == null) {
        this.called = 0;
      }
      this.called = this.called + 1;
      if (this.called === 10) {
        for (dir = _i = 0; _i <= 30; dir = ++_i) {
          this.create(Gridbug);
        }
        return this.create(Boss1);
      }
    };

    Level4.prototype.finished = function() {
      return this.called > 10 && !_.find(this.game.actors, (function(_this) {
        return function(actor) {
          return actor instanceof Boss1;
        };
      })(this));
    };

    Level4.prototype.next = function() {
      return new Level5(this.game);
    };

    return Level4;

  })(window.Chooser);

  window.Level5 = (function(_super) {
    __extends(Level5, _super);

    function Level5() {
      return Level5.__super__.constructor.apply(this, arguments);
    }

    Level5.prototype.monsterType = function() {
      return ElvenArcher;
    };

    Level5.prototype.finished = function() {
      return false;
    };

    Level5.prototype.next = function() {
      return new Level5(this.game);
    };

    return Level5;

  })(window.Chooser);

}).call(this);
