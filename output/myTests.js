// Generated by CoffeeScript 1.7.1
(function() {
  test("Random Returns number between 0 and 9", function() {
    var actual, index, number, _i, _results;
    _results = [];
    for (index = _i = 1; _i <= 200; index = ++_i) {
      number = Util.rand(10);
      actual = number <= 10 && number >= 0 ? true : false;
      _results.push(equal(actual, true));
    }
    return _results;
  });

  test("Random Returns integer", function() {
    var actual, index, number, _i, _results;
    _results = [];
    for (index = _i = 1; _i <= 100; index = ++_i) {
      number = Util.rand(50);
      actual = parseFloat(number) === parseInt(number) ? true : false;
      _results.push(equal(actual, true));
    }
    return _results;
  });

  test("pickRandom Returns items from list", function() {
    var index, listOfThings, result, t, thing, _i, _j, _len, _results;
    listOfThings = ['head', 'right arm', 'left arm', 'chest', 'groin', 'right leg', 'left leg'];
    result = {};
    for (index = _i = 1; _i <= 100; index = ++_i) {
      thing = Util.pickRandom(listOfThings);
      result[thing] || (result[thing] = 0);
      result[thing] += 1;
    }
    _results = [];
    for (_j = 0, _len = listOfThings.length; _j < _len; _j++) {
      t = listOfThings[_j];
      _results.push(ok(result[t], "failed to find " + t));
    }
    return _results;
  });

  test("Map 1 and Map 2 should contain different characters at 0,0", function() {
    var location, map1, map2;
    map1 = new Map(3, 3);
    map2 = new Map(3, 3);
    location = new Location([0, 0]);
    map1.setLocation(location, "@");
    equal("@", map1.at(location));
    map2.setLocation(location, "$");
    equal("$", map2.at(location));
    return notEqual(map1.at(location), map2.at(location));
  });

  test("locations of map should return list of x,y pairs", function() {
    var location, location2, map;
    map = new Map(5, 5);
    location = new Location([0, 0]);
    map.setLocation(location, "X");
    deepEqual([location], map.locations());
    location2 = new Location([0, 1]);
    map.setLocation(location2, ".");
    return deepEqual([location, location2], map.locations());
  });

  test("Is open map area", function() {
    var location, map;
    map = new Map(10, 10);
    location = new Location([2, 3]);
    map.setLocation(location, ".");
    ok(map.isOpen(location));
    return ok(!map.isOpen(new Location([0, 0])));
  });

  test("map.randomLocation returns realistic value spread", function() {
    var actual, i, location, map, val, _i, _j, _k, _len, _ref;
    map = new Map(10, 10);
    for (i = _i = 0; _i < 10; i = ++_i) {
      map.setLocation(new Location([0, i]), "0");
    }
    for (i = _j = 0; _j < 100; i = ++_j) {
      location = map.randomLocation();
      val = map.at(location);
      val++;
      map.setLocation(location, val);
      actual = true;
    }
    _ref = map.locations();
    for (_k = 0, _len = _ref.length; _k < _len; _k++) {
      location = _ref[_k];
      if (map.at(location) > 18 || map.at(location) < 3) {
        actual = false;
      }
    }
    return equal(actual, true);
  });

  test("location(0,1) returns x=0 and y=1", function() {
    var location;
    location = new Location([0, 1]);
    equal(location.x, 0);
    equal(location.y, 1);
    location = location.addDir([1, 1]);
    equal(location.x, 1);
    return equal(location.y, 2);
  });

  test("path contains expected path to destination, nextStep contains the first location in the path", function() {
    var destLocation, i, location, map, nextStep, path, _i;
    map = new Map(5, 5);
    for (i = _i = 1; _i < 4; i = ++_i) {
      map.setLocation(new Location([1, i]), ".");
    }
    location = new Location([1, 1]);
    destLocation = new Location([1, 4]);
    path = location.pathToDestination(destLocation, map);
    nextStep = location.nextStepToDestination(destLocation, map);
    deepEqual(path, [new Location([1, 2]), new Location([1, 3]), new Location([1, 4])]);
    return deepEqual(nextStep, new Location([1, 2]));
  });

}).call(this);
