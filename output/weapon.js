// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Weapon = (function() {
    function Weapon(fireRate, owner) {
      this.fireRate = fireRate;
      this.owner = owner;
    }

    Weapon.prototype.fire = function(dirIndex) {
      var xyDir;
      if ((this.lastFired != null) && Util.millisSince(this.lastFired) < this.fireRate) {
        return;
      }
      xyDir = Util.xyDir(dirIndex);
      this.shoot(xyDir);
      return this.lastFired = Util.millis();
    };

    return Weapon;

  })();

  window.ControlledBlink = (function(_super) {
    __extends(ControlledBlink, _super);

    function ControlledBlink(owner) {
      ControlledBlink.__super__.constructor.call(this, 200, owner);
    }

    ControlledBlink.prototype.shoot = function(xyDir) {
      var destination;
      destination = this.owner.location.addDir(xyDir, 8);
      return this.owner.moveTo(destination);
    };

    return ControlledBlink;

  })(window.Weapon);

  window.Dart = (function(_super) {
    var shootSound;

    __extends(Dart, _super);

    function Dart(owner) {
      Dart.__super__.constructor.call(this, 150, owner);
    }

    shootSound = new Howl({
      urls: ['./media/button.mp3']
    });

    Dart.prototype.shoot = function(xyDir) {
      var nextLocation;
      nextLocation = this.owner.location.addDir(xyDir);
      shootSound.play();
      return new Projectile(this.owner.game, nextLocation, this.owner, 20, "+", "yellow", 20, xyDir);
    };

    return Dart;

  })(window.Weapon);

  window.FireBall = (function(_super) {
    __extends(FireBall, _super);

    function FireBall(owner) {
      FireBall.__super__.constructor.call(this, 500, owner);
    }

    FireBall.prototype.shoot = function(xyDir) {
      var nextLocation;
      nextLocation = this.owner.location.addDir(xyDir);
      return new Ball(this.owner.game, nextLocation, xyDir, this.owner, 20);
    };

    return FireBall;

  })(window.Weapon);

  window.FireWall = (function(_super) {
    __extends(FireWall, _super);

    function FireWall(owner) {
      FireWall.__super__.constructor.call(this, 500, owner);
    }

    FireWall.prototype.makeCloud = function(loc) {
      return new UnmovingCloud(this.owner.game, loc);
    };

    FireWall.prototype.shoot = function(xyDir) {
      var leftTurn, main, spot;
      main = this.owner.location;
      main = main.addDir(xyDir, 5);
      leftTurn = Util.leftTurn(xyDir);
      spot = main.addDir(leftTurn, 5);
      return _.times(10, (function(_this) {
        return function(n) {
          _this.makeCloud(spot);
          return spot = spot.subtractDir(leftTurn);
        };
      })(this));
    };

    return FireWall;

  })(window.Weapon);

  window.ConeOfCold = (function(_super) {
    __extends(ConeOfCold, _super);

    function ConeOfCold(owner) {
      ConeOfCold.__super__.constructor.call(this, 500, owner);
    }

    ConeOfCold.prototype.shoot = function(xyDir) {
      var i, leftLoc, loc, rightLoc, sides, _i, _results;
      loc = this.owner.location;
      sides = -1;
      _results = [];
      for (i = _i = 0; _i < 8; i = ++_i) {
        if (i % 3 === 0) {
          sides = sides + 1;
        }
        loc = loc.addDir(xyDir);
        new ColdCloud(this.owner.game, loc, this.owner);
        leftLoc = loc;
        rightLoc = loc;
        _results.push(_.times(sides, (function(_this) {
          return function() {
            leftLoc = leftLoc.addDir(Util.leftTurn(xyDir));
            new ColdCloud(_this.owner.game, leftLoc, _this.owner);
            rightLoc = rightLoc.addDir(Util.rightTurn(xyDir));
            return new ColdCloud(_this.owner.game, rightLoc, _this.owner);
          };
        })(this)));
      }
      return _results;
    };

    return ConeOfCold;

  })(window.Weapon);

  window.RescueRay = (function(_super) {
    __extends(RescueRay, _super);

    function RescueRay(owner) {
      RescueRay.__super__.constructor.call(this, 300, owner);
    }

    RescueRay.prototype.shoot = function(xyDir) {
      var nextLocation;
      nextLocation = this.owner.location.addDir(xyDir);
      return new RescueProjectile(this.owner.game, nextLocation, this.owner, 15, "+", "white", 20, xyDir);
    };

    return RescueRay;

  })(window.Weapon);

  window.MagicMissile = (function(_super) {
    __extends(MagicMissile, _super);

    function MagicMissile(owner) {
      MagicMissile.__super__.constructor.call(this, 500, owner);
    }

    MagicMissile.prototype.shoot = function(xyDir) {
      var nextLocation;
      nextLocation = this.owner.location.addDir(xyDir);
      return new HomingProjectile(this.owner.game, nextLocation, this.owner, 50, "cyan", xyDir);
    };

    return MagicMissile;

  })(window.Weapon);

  window.SmokeTrail = (function(_super) {
    __extends(SmokeTrail, _super);

    function SmokeTrail(owner) {
      SmokeTrail.__super__.constructor.call(this, 200, owner);
    }

    SmokeTrail.prototype.shoot = function(xyDir) {
      var nextLocation, projectile, purples;
      nextLocation = this.owner.location.addDir(xyDir);
      purples = Colors.blues;
      projectile = new Particle(this.owner.game, nextLocation, this.owner, this.maxLife = 15, purples, 300);
      projectile.speed = 1000;
      return projectile;
    };

    return SmokeTrail;

  })(window.Weapon);

  window.KnifeWall = (function(_super) {
    __extends(KnifeWall, _super);

    function KnifeWall(owner) {
      KnifeWall.__super__.constructor.call(this, 150, owner);
    }

    KnifeWall.prototype.shoot = function(xyDir) {
      var dir, nextLocation, _i, _results;
      nextLocation = this.owner.location.addDir(xyDir);
      _results = [];
      for (dir = _i = 0; _i <= 7; dir = ++_i) {
        _results.push(new Projectile(this.owner.game, nextLocation, this.owner, 3, "+", "red", 20, Util.xyDir(dir)));
      }
      return _results;
    };

    return KnifeWall;

  })(window.Weapon);

}).call(this);
